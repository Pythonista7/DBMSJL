# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Jobs(models.Model):
    job_id = models.IntegerField(db_column='Job_ID', primary_key=True)  # Field name made lowercase.
    agency = models.CharField(db_column='Agency', max_length=250, blank=True, null=True)  # Field name made lowercase.
    posting_type = models.CharField(db_column='Posting_Type', max_length=250, blank=True, null=True)  # Field name made lowercase.
    no_of_positions = models.IntegerField(db_column='No_Of_Positions', blank=True, null=True)  # Field name made lowercase.
    business_title = models.CharField(db_column='Business_Title', max_length=250, blank=True, null=True)  # Field name made lowercase.
    job_category = models.CharField(db_column='Job_Category', max_length=250, blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'JOBS'


class JobDetails(models.Model):
    security_code = models.CharField(primary_key=True, max_length=30)
    title_code_no = models.CharField(db_column='Title_Code_No', max_length=250, blank=True, null=True)  # Field name made lowercase.
    division_work_unit = models.CharField(db_column='Division_Work_Unit', max_length=250, blank=True, null=True)  # Field name made lowercase.
    levels = models.CharField(db_column='Levels', max_length=25, blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'JOB_DETAILS'


class LocTime(models.Model):
    job = models.ForeignKey(Jobs, models.DO_NOTHING, db_column='Job_ID', primary_key=True)  # Field name made lowercase.
    phoneno = models.ForeignKey('Titles', models.DO_NOTHING, db_column='PhoneNo', blank=True, null=True)  # Field name made lowercase.
    work_location = models.CharField(db_column='Work_Location', max_length=100, blank=True, null=True)  # Field name made lowercase.
    residency_requirement = models.CharField(db_column='Residency_Requirement', max_length=250, blank=True, null=True)  # Field name made lowercase.
    posting_date = models.DateField(db_column='Posting_Date', blank=True, null=True)  # Field name made lowercase.
    posting_updated = models.DateField(db_column='Posting_Updated', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'LOC_TIME'


class Salary(models.Model):
    job = models.ForeignKey(Jobs, models.DO_NOTHING, db_column='Job_ID', primary_key=True)  # Field name made lowercase.
    full_part_time_indicator = models.CharField(db_column='Full_Part_Time_indicator', max_length=10, blank=True, null=True)  # Field name made lowercase.
    phoneno = models.ForeignKey('Titles', models.DO_NOTHING, db_column='PhoneNo', blank=True, null=True)  # Field name made lowercase.
    salary_range_from = models.IntegerField(db_column='Salary_Range_From', blank=True, null=True)  # Field name made lowercase.
    salary_range_to = models.IntegerField(db_column='Salary_Range_To', blank=True, null=True)  # Field name made lowercase.
    salary_frequency = models.CharField(db_column='Salary_Frequency', max_length=30, blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'SALARY'


class Titles(models.Model):
    civil_service_title = models.CharField(db_column='Civil_Service_Title', max_length=250, blank=True, null=True)  # Field name made lowercase.
    title_code_no = models.CharField(db_column='Title_Code_No', max_length=250, blank=True, null=True)  # Field name made lowercase.
    division_work_unit = models.CharField(db_column='Division_Work_Unit', max_length=250, blank=True, null=True)  # Field name made lowercase.
    phoneno = models.CharField(db_column='PhoneNo', primary_key=True, max_length=20)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'TITLES'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'
